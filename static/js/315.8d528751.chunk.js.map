{"version":3,"file":"static/js/315.8d528751.chunk.js","mappings":"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","sources":["components/Api/ApiMovie.jsx","webpack://react-homework-template/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.jsx","pages/Movie/Movie.jsx","webpack://react-homework-template/./src/pages/Home/Home.module.css?1370"],"sourcesContent":["const API_KEY = 'e0ed1638ffdd17848c4367fe92782c7d';\n\nexport const getTrendingFilms = () => {\n    const queryParams = new URLSearchParams({\n        api_key: API_KEY,\n    });\n\n    return fetch(`https://api.themoviedb.org/3/trending/all/week?${queryParams}`)\n        .then(res => res.json())\n        .then(res => res.results);\n};\n\nexport const getFilmsById = moveiID => {\n    const queryParams = new URLSearchParams({\n        api_key: API_KEY,\n    });\n\n    return fetch(\n        `https://api.themoviedb.org/3/movie/${moveiID}?${queryParams}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n            return Promise.reject(\n                new Error(`We don't have information about this Movie`)\n            );\n        });\n};\n\nexport const getFilmsByQuery = q => {\n    const queryParams = new URLSearchParams({\n        api_key: API_KEY,\n    });\n    \n    return fetch(\n        `https://api.themoviedb.org/3/search/movie?${queryParams}&language=en-US&page=1&include_adult=false&query=${q}`)\n        .then(res => res.json()).then(res => res.results);\n};\n\nexport const getCastFilm = moveiID => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${moveiID}/credits?${queryParams}&language=en-US`\n  )\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      return Promise.reject(new Error(`We don't have about this Movie`));\n    })\n    .then(res => res.cast);\n};\n\nexport const getReviewFilm = moveiID => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${moveiID}/reviews?${queryParams}&language=en-US&page=1`\n  )\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      return Promise.reject(new Error(`We don't have about this Movie`));\n    })\n    .then(res => res.results);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"search\":\"Searchbar_search__RgdH8\",\"searchTerm\":\"Searchbar_searchTerm__Yautg\",\"searchButton\":\"Searchbar_searchButton__8lE-T\",\"wrap\":\"Searchbar_wrap__FXu2S\"};","import { useState } from 'react';\nimport css from '../Searchbar/Searchbar.module.css';\nimport PropTypes from 'prop-types';\n\n\nexport default function Searchbar({ onSubmit }) {\n    const [searchName, setSearchName] = useState('');\n\n  const handleNameChange = event => {\n    setSearchName(event.currentTarget.value.toLowerCase());\n    };\n    \n    const submitForm = event => {\n    event.preventDefault();\n\n    if (searchName.trim() === '') {\n      alert('Something go wrong. Try one more time');\n      return;\n    }\n    onSubmit(searchName);\n    setSearchName('');\n    };\n    \n    return (\n    <form className={css.search} onSubmit={submitForm}>\n      <input\n        className={css.searchTerm}\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        value={searchName}\n        onChange={handleNameChange}\n      />\n\n      <button className={css.searchButton} type=\"submit\">\n        Search\n      </button>\n    </form>\n  );\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\n\n","import { useState, useEffect } from 'react';\nimport MovieSearch from 'components/Searchbar/Searchbar';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport * as FilmsAPI from '../../components/Api/ApiMovie';\nimport css from '../Home/Home.module.css';\nimport image from '../../images/film.webp';\n\nconst IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst Movie = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [filmsByQuery, setFilmsByQuery] = useState([]);\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  const submitForm = params => {\n    setSearchParams(params !== '' ? { query: params } : {});\n  };\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    FilmsAPI.getFilmsByQuery(query).then(setFilmsByQuery);\n  }, [query]);\n\n  const poster = poster => {\n    if (!poster) {\n      return image;\n    }\n\n    return `${IMAGE_URL}${poster}`;\n  };\n\n  return (\n    <>\n      <MovieSearch onSubmit={submitForm} />\n\n      {filmsByQuery && (\n        <ul className={css.home_styled_ul}>\n          {filmsByQuery.map(film => (\n            <li className={css.list_home} key={film.id}>\n              <Link\n                className={css.home_link}\n                to={`/movies/${film.id}`}\n                state={{ from: location }}\n              >\n                <img\n                  className={css.home_img}\n                  width={420}\n                  src={poster(film.poster_path)}\n                  alt={film.title}\n                />\n                {film.title} {film.name}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Movie;","// extracted by mini-css-extract-plugin\nexport default {\"home_styled_ul\":\"Home_home_styled_ul__zNaTm\",\"list_home\":\"Home_list_home__K041t\",\"home_img\":\"Home_home_img__inaBL\",\"home_link\":\"Home_home_link__CREjD\"};"],"names":["API_KEY","getTrendingFilms","queryParams","URLSearchParams","api_key","fetch","then","res","json","results","getFilmsById","moveiID","response","ok","Promise","reject","Error","getFilmsByQuery","q","getCastFilm","cast","getReviewFilm","Searchbar","onSubmit","useState","searchName","setSearchName","className","css","event","preventDefault","trim","alert","type","autoComplete","autoFocus","value","onChange","currentTarget","toLowerCase","useSearchParams","searchParams","setSearchParams","filmsByQuery","setFilmsByQuery","query","get","location","useLocation","useEffect","FilmsAPI","poster","image","params","map","film","to","id","state","from","width","src","poster_path","alt","title","name"],"sourceRoot":""}